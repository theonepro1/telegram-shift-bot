import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import json
import os

TOKEN = os.getenv("TOKEN")
DATA_FILE = os.getenv("DATA_FILE", "data.json")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

data = load_data()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã
def get_current_shift():
    now = datetime.datetime.now()
    shift_type = "–î–ï–ù–¨" if now.hour < 20 else "–ù–û–ß–¨"
    return now.strftime("%d.%m.%y"), shift_type

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def update_shift():
    today, shift = get_current_shift()
    if shift == "–î–ï–ù–¨":
        next_shift = "–ù–û–ß–¨"
    else:
        next_shift = "–î–ï–ù–¨"
        today = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime("%d.%m.%y")
    return today, next_shift

# –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –±–∞—Ä–º–µ–Ω—ã (–¥–ª—è –≤—ã–±–æ—Ä–∞)
operators = ["–ê—Ä–¥–∏–Ω–∞", "–ù–∞–∑–≥—É–ª", "–ñ–∞–∑–∏—Ä–∞"]
barmen = ["–î–∞—Å—Ç–∞–Ω", "–ú–∞–≥–∂–∞–Ω", "–ú–µ–π—Ä–∂–∞–Ω"]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
operator_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
for op in operators:
    operator_keyboard.add(KeyboardButton(op))

barmen_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
for br in barmen:
    barmen_keyboard.add(KeyboardButton(br))

confirm_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"),
    KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def set_state(user_id, state):
    user_states[user_id] = state

def get_state(user_id):
    return user_states.get(user_id)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    today, shift = get_current_shift()
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–µ–π—á–∞—Å –∏–¥–µ—Ç —Å–º–µ–Ω–∞ ({today} - {shift}).\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=operator_keyboard)
    set_state(message.from_user.id, "choose_operator")

@dp.message_handler(lambda message: get_state(message.from_user.id) == "choose_operator" and message.text in operators)
async def operator_selected(message: types.Message):
    set_state(message.from_user.id, "enter_pc_income")
    await message.answer(f"–û–ø–µ—Ä–∞—Ç–æ—Ä {message.text}, –≤–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ –ü–ö:", reply_markup=types.ReplyKeyboardRemove())

data_store = {}

@dp.message_handler(lambda message: get_state(message.from_user.id) == "enter_pc_income" and message.text.isdigit())
async def enter_pc_income(message: types.Message):
    data_store[message.from_user.id] = {"pc_income": int(message.text)}
    set_state(message.from_user.id, "enter_simracing_income")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ SimRacing:")

@dp.message_handler(lambda message: get_state(message.from_user.id) == "enter_simracing_income" and message.text.isdigit())
async def enter_simracing_income(message: types.Message):
    data_store[message.from_user.id]["simracing_income"] = int(message.text)
    set_state(message.from_user.id, "enter_playstation_income")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ PlayStation:")

@dp.message_handler(lambda message: get_state(message.from_user.id) == "enter_playstation_income" and message.text.isdigit())
async def enter_playstation_income(message: types.Message):
    data_store[message.from_user.id]["playstation_income"] = int(message.text)
    set_state(message.from_user.id, "enter_cash_left")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ (–¥–æ 3000 —Ç–µ–Ω–≥–µ):")

@dp.message_handler(lambda message: get_state(message.from_user.id) == "enter_cash_left" and message.text.isdigit())
async def enter_cash_left(message: types.Message):
    data_store[message.from_user.id]["cash_left"] = int(message.text)
    set_state(message.from_user.id, "confirm_shift")
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
                         f"–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ü–ö: {data_store[message.from_user.id]['pc_income']}\n"
                         f"–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è SimRacing: {data_store[message.from_user.id]['simracing_income']}\n"
                         f"–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è PlayStation: {data_store[message.from_user.id]['playstation_income']}\n"
                         f"–û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ: {data_store[message.from_user.id]['cash_left']}\n"
                         f"\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–¥–∞—á—É —Å–º–µ–Ω—ã:", reply_markup=confirm_keyboard)

@dp.message_handler(lambda message: get_state(message.from_user.id) == "confirm_shift" and message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")
async def confirm_shift(message: types.Message):
    today, shift = get_current_shift()
    next_day, next_shift = update_shift()
    await message.answer(f"‚úÖ –°–º–µ–Ω–∞ ({today} - {shift}) –ó–ê–ö–†–´–õ–ê–°–¨.\nüéâ –û—Ç–∫—Ä—ã–ª–∞—Å—å —Å–º–µ–Ω–∞ ({next_day} - {next_shift}).")
    await message.answer("–ë–∞—Ä–º–µ–Ω, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤:", reply_markup=barmen_keyboard)

@dp.message_handler(lambda message: get_state(message.from_user.id) == "confirm_shift" and message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_shift(message: types.Message):
    await message.answer("–û—Ç–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
