import datetime
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
TOKEN = os.getenv("TOKEN")
DATA_FILE = os.getenv("DATA_FILE", "data.json")

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (–º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π)
class ShiftState(StatesGroup):
    choosing_operator = State()
    pc_income = State()
    simracing_income = State()
    playstation_income = State()
    cash_left = State()
    confirm_operator = State()
    choosing_barmen = State()
    bar_income = State()
    confirm_barmen = State()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

data = load_data()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã
def get_current_shift():
    now = datetime.datetime.now()
    shift_type = "–î–ï–ù–¨" if now.hour < 20 else "–ù–û–ß–¨"
    return now.strftime("%d.%m.%y"), shift_type

def update_shift():
    today, shift = get_current_shift()
    if shift == "–î–ï–ù–¨":
        next_shift = "–ù–û–ß–¨"
    else:
        next_shift = "–î–ï–ù–¨"
        today = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime("%d.%m.%y")
    return today, next_shift

# –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –±–∞—Ä–º–µ–Ω—ã
operators = ["–ê—Ä–¥–∏–Ω–∞", "–ù–∞–∑–≥—É–ª", "–ñ–∞–∑–∏—Ä–∞"]
barmen = ["–î–∞—Å—Ç–∞–Ω", "–ú–∞–≥–∂–∞–Ω", "–ú–µ–π—Ä–∂–∞–Ω"]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
operator_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
for op in operators:
    operator_keyboard.add(KeyboardButton(op))

barmen_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
for br in barmen:
    barmen_keyboard.add(KeyboardButton(br))

confirm_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"),
    KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    today, shift = get_current_shift()
    await ShiftState.choosing_operator.set()
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–µ–π—á–∞—Å –∏–¥–µ—Ç —Å–º–µ–Ω–∞ ({today} - {shift}).\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=operator_keyboard)

# –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç —Å–≤–æ–µ –∏–º—è
@dp.message_handler(lambda message: message.text in operators, state=ShiftState.choosing_operator)
async def operator_selected(message: types.Message, state: FSMContext):
    await state.update_data(operator=message.text)
    await ShiftState.pc_income.set()
    await message.answer(f"–û–ø–µ—Ä–∞—Ç–æ—Ä {message.text}, –≤–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ –ü–ö:", reply_markup=ReplyKeyboardRemove())

# –í–≤–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –ø–æ –ü–ö
@dp.message_handler(state=ShiftState.pc_income)
async def pc_income(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
        return
    await state.update_data(pc_income=int(message.text))
    await ShiftState.simracing_income.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ SimRacing:")

# –í–≤–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –ø–æ SimRacing
@dp.message_handler(state=ShiftState.simracing_income)
async def simracing_income(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
        return
    await state.update_data(simracing_income=int(message.text))
    await ShiftState.playstation_income.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ PlayStation:")

# –í–≤–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –ø–æ PlayStation
@dp.message_handler(state=ShiftState.playstation_income)
async def playstation_income(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
        return
    await state.update_data(playstation_income=int(message.text))
    await ShiftState.cash_left.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–≥ –≤ –∫–∞—Å—Å–µ (–¥–æ 3000 —Ç–µ–Ω–≥–µ):")

# –í–≤–æ–¥ –æ—Å—Ç–∞—Ç–∫–∞ –≤ –∫–∞—Å—Å–µ
@dp.message_handler(state=ShiftState.cash_left)
async def cash_left(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
        return
    await state.update_data(cash_left=int(message.text))

    data = await state.get_data()
    summary = f"üìã *–°–≤–æ–¥–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {data['operator']}*:\n"
    summary += f"üíª –ü–ö: {data['pc_income']} —Ç–µ–Ω–≥–µ\n"
    summary += f"üèé SimRacing: {data['simracing_income']} —Ç–µ–Ω–≥–µ\n"
    summary += f"üéÆ PlayStation: {data['playstation_income']} —Ç–µ–Ω–≥–µ\n"
    summary += f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ: {data['cash_left']} —Ç–µ–Ω–≥–µ\n\n"
    summary += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:"

    await ShiftState.confirm_operator.set()
    await message.answer(summary, reply_markup=confirm_keyboard, parse_mode="Markdown")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
@dp.message_handler(state=ShiftState.confirm_operator)
async def confirm_operator(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é":
        await ShiftState.choosing_barmen.set()
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—á–µ—Ä–µ–¥—å –±–∞—Ä–º–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:", reply_markup=barmen_keyboard)
    else:
        await ShiftState.pc_income.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ!")

# –ë–∞—Ä–º–µ–Ω –≤—ã–±–∏—Ä–∞–µ—Ç –∏–º—è
@dp.message_handler(lambda message: message.text in barmen, state=ShiftState.choosing_barmen)
async def barmen_selected(message: types.Message, state: FSMContext):
    await state.update_data(barmen=message.text)
    await ShiftState.bar_income.set()
    await message.answer(f"–ë–∞—Ä–º–µ–Ω {message.text}, –≤–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ –±–∞—Ä—É:", reply_markup=ReplyKeyboardRemove())

# –í–≤–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –ø–æ –±–∞—Ä—É
@dp.message_handler(state=ShiftState.bar_income)
async def bar_income(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
        return
    await state.update_data(bar_income=int(message.text))

    await ShiftState.confirm_barmen.set()
    await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏:", reply_markup=confirm_keyboard)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–∞—Ä–º–µ–Ω–∞
@dp.message_handler(state=ShiftState.confirm_barmen)
async def confirm_barmen(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é":
        today, shift = get_current_shift()
        next_day, next_shift = update_shift()
        await message.answer(f"‚úÖ *–°–º–µ–Ω–∞ ({today} - {shift}) –∑–∞–∫—Ä—ã—Ç–∞!*\nüîÑ *–û—Ç–∫—Ä—ã–ª–∞—Å—å —Å–º–µ–Ω–∞ ({next_day} - {next_shift}).*", parse_mode="Markdown")
    else:
        await message.answer("–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
