import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import json
import os

TOKEN = os.getenv("TOKEN")
DATA_FILE = os.getenv("DATA_FILE", "data.json")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, dict): 
                return data
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

data = load_data()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã
def get_current_shift():
    now = datetime.datetime.now()
    shift_type = "–î–ï–ù–¨" if now.hour < 20 else "–ù–û–ß–¨"
    return now.strftime("%d.%m.%y"), shift_type

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def update_shift():
    today, shift = get_current_shift()
    if shift == "–î–ï–ù–¨":
        next_shift = "–ù–û–ß–¨"
    else:
        next_shift = "–î–ï–ù–¨"
        today = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime("%d.%m.%y")
    return today, next_shift

# –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –±–∞—Ä–º–µ–Ω—ã (–¥–ª—è –≤—ã–±–æ—Ä–∞)
operators = ["–ê—Ä–¥–∏–Ω–∞", "–ù–∞–∑–≥—É–ª", "–ñ–∞–∑–∏—Ä–∞"]
barmen = ["–î–∞—Å—Ç–∞–Ω", "–ú–∞–≥–∂–∞–Ω", "–ú–µ–π—Ä–∂–∞–Ω"]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
confirm_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"),
    KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
)

operator_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
for op in operators:
    operator_keyboard.add(KeyboardButton(op))

barmen_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
for br in barmen:
    barmen_keyboard.add(KeyboardButton(br))

numeric_keyboard = types.ReplyKeyboardRemove()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    today, shift = get_current_shift()
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–µ–π—á–∞—Å –∏–¥–µ—Ç —Å–º–µ–Ω–∞ ({today} - {shift}).\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=operator_keyboard)

@dp.message_handler(lambda message: message.text in operators)
async def operator_selected(message: types.Message):
    if isinstance(data, dict):
    data["operator"] = message.text
else:
    data = {"operator": message.text}
    save_data(data)
    await message.answer(f"üñ•Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ –ü–ö:", reply_markup=numeric_keyboard)

@dp.message_handler(lambda message: message.text.isdigit(), state=None)
async def pc_income(message: types.Message):
    data["pc_income"] = int(message.text)
    save_data(data)
    await message.answer(f"üéÆ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ SimRacing:")

@dp.message_handler(lambda message: message.text.isdigit())
async def simracing_income(message: types.Message):
    data["simracing_income"] = int(message.text)
    save_data(data)
    await message.answer(f"üïπÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ PlayStation:")

@dp.message_handler(lambda message: message.text.isdigit())
async def playstation_income(message: types.Message):
    data["playstation_income"] = int(message.text)
    save_data(data)
    await message.answer(f"üí∞ –í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–≥ –≤ –∫–∞—Å—Å–µ (–¥–æ 3000 —Ç–µ–Ω–≥–µ):")

@dp.message_handler(lambda message: message.text.isdigit())
async def cash_left(message: types.Message):
    data["cash_left"] = int(message.text)
    save_data(data)
    await message.answer(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
                         f"üñ•Ô∏è –ü–ö: {data['pc_income']} —Ç–µ–Ω–≥–µ\n"
                         f"üéÆ SimRacing: {data['simracing_income']} —Ç–µ–Ω–≥–µ\n"
                         f"üïπÔ∏è PlayStation: {data['playstation_income']} —Ç–µ–Ω–≥–µ\n"
                         f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ: {data['cash_left']} —Ç–µ–Ω–≥–µ", reply_markup=confirm_keyboard)

@dp.message_handler(lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")
async def confirm_operator(message: types.Message):
    await message.answer(f"üì¢ –¢–µ–ø–µ—Ä—å –æ—á–µ—Ä–µ–¥—å –±–∞—Ä–º–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=barmen_keyboard)

@dp.message_handler(lambda message: message.text in barmen)
async def barmen_selected(message: types.Message):
    data["barmen"] = message.text
    save_data(data)
    await message.answer(f"üçπ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ –±–∞—Ä—É:", reply_markup=numeric_keyboard)

@dp.message_handler(lambda message: message.text.isdigit())
async def bar_income(message: types.Message):
    data["bar_income"] = int(message.text)
    save_data(data)
    await message.answer(f"ü•§ –í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞–ø–∏—Ç–∫–æ–≤ (—à—Ç.):")

@dp.message_handler(lambda message: message.text.isdigit())
async def drinks_left(message: types.Message):
    data["drinks_left"] = int(message.text)
    save_data(data)
    await message.answer(f"üçî –í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –µ–¥—ã (—à—Ç.):")

@dp.message_handler(lambda message: message.text.isdigit())
async def food_left(message: types.Message):
    data["food_left"] = int(message.text)
    save_data(data)
    await message.answer(f"üí∞ –í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –¥–µ–Ω–µ–≥ –≤ –∫–∞—Å—Å–µ (–¥–æ 3000 —Ç–µ–Ω–≥–µ):")

@dp.message_handler(lambda message: message.text.isdigit())
async def bar_cash_left(message: types.Message):
    data["bar_cash_left"] = int(message.text)
    save_data(data)
    await message.answer(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
                         f"üçπ –ë–∞—Ä: {data['bar_income']} —Ç–µ–Ω–≥–µ\n"
                         f"ü•§ –ù–∞–ø–∏—Ç–∫–∏: {data['drinks_left']} —à—Ç.\n"
                         f"üçî –ï–¥–∞: {data['food_left']} —à—Ç.\n"
                         f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ: {data['bar_cash_left']} —Ç–µ–Ω–≥–µ", reply_markup=confirm_keyboard)

@dp.message_handler(lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")
async def confirm_barmen(message: types.Message):
    today, shift = get_current_shift()
    next_day, next_shift = update_shift()
    await message.answer(f"üéâ –ö—É—Ç—Ç—ã –±–æ–ª—Å—ã–Ω! –°–º–µ–Ω–∞ ({today} - {shift}) –ó–ê–ö–†–´–õ–ê–°–¨.\n"
                         f"üì¢ –û—Ç–∫—Ä—ã–ª–∞—Å—å —Å–º–µ–Ω–∞ ({next_day} - {next_shift}).")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
