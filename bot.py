import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import os

TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class ShiftState(StatesGroup):
    operator_name = State()
    pc_income = State()
    simracing_income = State()
    playstation_income = State()
    cash_left = State()
    bar_name = State()
    bar_income = State()
    drinks_left = State()
    food_left = State()
    bar_cash_left = State()
    confirm = State()

operators = ["–ê—Ä–¥–∏–Ω–∞", "–ù–∞–∑–≥—É–ª", "–ñ–∞–∑–∏—Ä–∞"]
barmen = ["–î–∞—Å—Ç–∞–Ω", "–ú–∞–≥–∂–∞–Ω", "–ú–µ–π—Ä–∂–∞–Ω"]

operator_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
for op in operators:
    operator_keyboard.add(KeyboardButton(op))

barmen_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
for br in barmen:
    barmen_keyboard.add(KeyboardButton(br))

confirm_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"),
    KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=operator_keyboard)
    await ShiftState.operator_name.set()

@dp.message_handler(lambda message: message.text in operators, state=ShiftState.operator_name)
async def operator_selected(message: types.Message, state: FSMContext):
    await state.update_data(operator=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ –ü–ö:")
    await ShiftState.pc_income.set()

@dp.message_handler(state=ShiftState.pc_income)
async def get_pc_income(message: types.Message, state: FSMContext):
    await state.update_data(pc_income=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ SimRacing:")
    await ShiftState.simracing_income.set()

@dp.message_handler(state=ShiftState.simracing_income)
async def get_simracing_income(message: types.Message, state: FSMContext):
    await state.update_data(simracing_income=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ PlayStation:")
    await ShiftState.playstation_income.set()

@dp.message_handler(state=ShiftState.playstation_income)
async def get_playstation_income(message: types.Message, state: FSMContext):
    await state.update_data(playstation_income=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ (–∫–æ–ø–µ–π–∫–∏ –¥–æ 3000 —Ç–µ–Ω–≥–µ):")
    await ShiftState.cash_left.set()

@dp.message_handler(state=ShiftState.cash_left)
async def get_cash_left(message: types.Message, state: FSMContext):
    await state.update_data(cash_left=message.text)
    data = await state.get_data()
    summary = (f"–°–≤–æ–¥–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {data['operator']}:\n"
               f"üñ• –ü–ö: {data['pc_income']} —Ç–≥\n"
               f"üèé SimRacing: {data['simracing_income']} —Ç–≥\n"
               f"üéÆ PlayStation: {data['playstation_income']} —Ç–≥\n"
               f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ: {data['cash_left']} —Ç–≥")
    await message.answer(summary, reply_markup=confirm_keyboard)
    await ShiftState.confirm.set()

@dp.message_handler(lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", state=ShiftState.confirm)
async def confirm_operator_data(message: types.Message, state: FSMContext):
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—á–µ—Ä–µ–¥—å –±–∞—Ä–º–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:", reply_markup=barmen_keyboard)
    await ShiftState.bar_name.set()

@dp.message_handler(lambda message: message.text in barmen, state=ShiftState.bar_name)
async def bar_selected(message: types.Message, state: FSMContext):
    await state.update_data(bar_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ –±–∞—Ä—É:")
    await ShiftState.bar_income.set()

@dp.message_handler(state=ShiftState.bar_income)
async def get_bar_income(message: types.Message, state: FSMContext):
    await state.update_data(bar_income=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞–ø–∏—Ç–∫–æ–≤ (—à—Ç.):")
    await ShiftState.drinks_left.set()

@dp.message_handler(state=ShiftState.drinks_left)
async def get_drinks_left(message: types.Message, state: FSMContext):
    await state.update_data(drinks_left=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –µ–¥—ã (—à—Ç.):")
    await ShiftState.food_left.set()

@dp.message_handler(state=ShiftState.food_left)
async def get_food_left(message: types.Message, state: FSMContext):
    await state.update_data(food_left=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –º–µ–ª–æ—á–∏ –≤ –∫–∞—Å—Å–µ (–∫–æ–ø–µ–π–∫–∏ –¥–æ 3000 —Ç–≥):")
    await ShiftState.bar_cash_left.set()

@dp.message_handler(state=ShiftState.bar_cash_left)
async def get_bar_cash_left(message: types.Message, state: FSMContext):
    await state.update_data(bar_cash_left=message.text)
    data = await state.get_data()
    summary = (f"–°–≤–æ–¥–∫–∞ –ø–æ –±–∞—Ä–º–µ–Ω—É {data['bar_name']}:\n"
               f"üçπ –ë–∞—Ä: {data['bar_income']} —Ç–≥\n"
               f"ü•§ –ù–∞–ø–∏—Ç–∫–∏: {data['drinks_left']} —à—Ç\n"
               f"üçî –ï–¥–∞: {data['food_left']} —à—Ç\n"
               f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ: {data['bar_cash_left']} —Ç–≥")
    await message.answer(summary, reply_markup=confirm_keyboard)
    await ShiftState.confirm.set()

@dp.message_handler(lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", state=ShiftState.confirm)
async def confirm_bar_data(message: types.Message, state: FSMContext):
    today = datetime.datetime.now().strftime("%d.%m.%y")
    await message.answer(f"‚úÖ –°–º–µ–Ω–∞ {today} –ó–ê–ö–†–´–¢–ê! –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–º–µ–Ω–∞.")
    await state.finish()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
