import logging
import asyncio
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
import json
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
DATA_FILE = os.getenv("DATA_FILE", "database.json")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
class ShiftData(StatesGroup):
    pc_income = State()
    simracing_income = State()
    playstation_income = State()
    cash_left = State()
    bar_income = State()
    drinks_left = State()
    food_left = State()
    bar_cash_left = State()
    confirm = State()

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON
def save_data(data):
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            existing_data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        existing_data = []

    existing_data.append(data)
    
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(existing_data, f, indent=4, ensure_ascii=False)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–º–µ–Ω—É. –ù–∞–∂–º–∏—Ç–µ '–°–¥–∞—Ç—å —Å–º–µ–Ω—É' –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                         reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–°–¥–∞—Ç—å —Å–º–µ–Ω—É")))

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–¥–∞—á–∏ —Å–º–µ–Ω—ã
@dp.message_handler(lambda message: message.text == "–°–¥–∞—Ç—å —Å–º–µ–Ω—É")
async def start_shift(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –æ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ (—Ç–µ–Ω–≥–µ):")
    await ShiftData.pc_income.set()

@dp.message_handler(state=ShiftData.pc_income)
async def get_pc_income(message: types.Message, state: FSMContext):
    await state.update_data(pc_income=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –æ—Ç SimRacing:")
    await ShiftData.simracing_income.set()

@dp.message_handler(state=ShiftData.simracing_income)
async def get_simracing_income(message: types.Message, state: FSMContext):
    await state.update_data(simracing_income=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –æ—Ç PlayStation:")
    await ShiftData.playstation_income.set()

@dp.message_handler(state=ShiftData.playstation_income)
async def get_playstation_income(message: types.Message, state: FSMContext):
    await state.update_data(playstation_income=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –∫–∞—Å—Å–µ (—Ç–µ–Ω–≥–µ)?")
    await ShiftData.cash_left.set()

@dp.message_handler(state=ShiftData.cash_left)
async def get_cash_left(message: types.Message, state: FSMContext):
    await state.update_data(cash_left=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –æ—Ç –±–∞—Ä–∞:")
    await ShiftData.bar_income.set()

@dp.message_handler(state=ShiftData.bar_income)
async def get_bar_income(message: types.Message, state: FSMContext):
    await state.update_data(bar_income=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞–ø–∏—Ç–∫–æ–≤ (—à—Ç.)?")
    await ShiftData.drinks_left.set()

@dp.message_handler(state=ShiftData.drinks_left)
async def get_drinks_left(message: types.Message, state: FSMContext):
    await state.update_data(drinks_left=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –µ–¥—ã (—à—Ç.)?")
    await ShiftData.food_left.set()

@dp.message_handler(state=ShiftData.food_left)
async def get_food_left(message: types.Message, state: FSMContext):
    await state.update_data(food_left=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –∫–∞—Å—Å–µ –±–∞—Ä–∞ (—Ç–µ–Ω–≥–µ)?")
    await ShiftData.bar_cash_left.set()

@dp.message_handler(state=ShiftData.bar_cash_left)
async def get_bar_cash_left(message: types.Message, state: FSMContext):
    await state.update_data(bar_cash_left=message.text)
    
    data = await state.get_data()
    
    summary = (
        f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Å–º–µ–Ω–µ:\n"
        f"üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã: {data['pc_income']} —Ç–µ–Ω–≥–µ\n"
        f"üèé SimRacing: {data['simracing_income']} —Ç–µ–Ω–≥–µ\n"
        f"üéÆ PlayStation: {data['playstation_income']} —Ç–µ–Ω–≥–µ\n"
        f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ: {data['cash_left']} —Ç–µ–Ω–≥–µ\n"
        f"üçπ –ë–∞—Ä: {data['bar_income']} —Ç–µ–Ω–≥–µ\n"
        f"ü•§ –ù–∞–ø–∏—Ç–∫–∏: {data['drinks_left']} —à—Ç.\n"
        f"üçî –ï–¥–∞: {data['food_left']} —à—Ç.\n"
        f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—Å—Å–µ –±–∞—Ä–∞: {data['bar_cash_left']} —Ç–µ–Ω–≥–µ\n"
        f"\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–¥–∞—á—É —Å–º–µ–Ω—ã? (–î–∞/–ù–µ—Ç)"
    )
    
    await message.answer(summary)
    await ShiftData.confirm.set()

@dp.message_handler(state=ShiftData.confirm)
async def confirm_shift(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        data = await state.get_data()
        save_data(data)
        await message.answer("‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–Ω–∞! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        await state.finish()
    else:
        await message.answer("‚ùå –°–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.finish()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
